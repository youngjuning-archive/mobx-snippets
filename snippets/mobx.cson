'.source.js.jsx,.source.js':
  'mobx':
    'prefix': 'mobx'
    'body': """
      import { observable, action, runInAction, computed, toJS } from "mobx"
    """
  'mobx-file':
    'prefix': 'mobx-file'
    'body': """
      import { observable, action, runInAction, computed, toJS } from "mobx"

      class ${1:ClassName} {
        @observable title = ''
      }

      export default ${1:ClassName}

    """
  'mobx-class':
    'prefix': 'mobx-class'
    'body': """
      class ${1:ClassName} {
        @observable title = ''
      }
    """
  'mobx observable':
    'prefix': 'mobx-observable'
    'body': """
      @observable $1 = $2
    """
    'description': '@observable 可以在实例字段和属性 getter 上使用'
    'descriptionMoreURL': 'http://t.cn/EPkOcSG'
  'mobx action':
    'prefix': 'mobx-action'
    'body': """
      @action ${1:boundClassMethod} = () => {
        $2
      }
    """
    'description': '使用MobX你可以在代码中显式地标记出动作所在的位置'
    'descriptionMoreURL': 'http://t.cn/EPkohi3'
  'mobx runInAction':
    'prefix': 'mobx-runInAction'
    'body': """
      runInAction(() => {
        $1
      })
    """
    'description': 'runInAction 工具函数'
    'descriptionMoreURL': 'http://t.cn/EhlfHbW'
  'mobx computed':
    'prefix': 'mobx-computed'
    'body': """
      @computed get ${1:funcName}() {
        return $2
      }
    """
    'description': '计算值还是高度优化过的，所以尽可能的多使用它们'
    'descriptionMoreURL': 'http://t.cn/E7uudG2'
  'import mobx-react':
    'prefix': 'mobx-react'
    'body': """
      import { observer } from "mobx-react"
    """
    'description': 'React bindings for MobX'
    'descriptionMoreURL': 'http://t.cn/R5cHJQf'
  'mobx-react-native':
    'prefix': 'mobx-rn'
    'body': """
      import { observer } from "mobx-react/native"
    """
  'mobx-rn-screen':
    'prefix': 'mobx-rn-screen'
    'body': """
      import React, { Component } from 'react'
      import { View, Text, StyleSheet } from 'react-native'
      import { observer } from 'mobx-react/native'

      @observer
      class ${1:MyComponent} extends Component {
        constructor(props) {
          super(props)
        }

        componentDidMount() {}

        render() {
          return (
            <View style={styles.container}>
              <Text>I am the ${1:MyComponent} component</Text>
            </View>
          )
        }
      }

      const styles = StyleSheet.create({
        container: {
          flex: 1,
        },
      })
      
      export default ${1:MyComponent}

    """
  'mobx-rn-component':
    'prefix': 'mobx-rn-component'
    'body': """
      import React, { Component } from 'react'
      import { View, Text, StyleSheet } from 'react-native'
      import PropTypes from 'prop-types'
      import { observer } from 'mobx-react/native'

      @observer
      class ${1:MyComponent} extends Component {
        static propTypes = {
          copyUsers: PropTypes.array.isRequired,
          extraCopyUsers: PropTypes.array.isRequired,
          style: PropTypes.array,
          onAdd: PropTypes.func.isRequired,
        }

        static defaultProps = {
          style: {},
        }

        render() {
          return (
            <View style={styles.container}>
              <Text>I am the ${1:MyComponent} component</Text>
            </View>
          )
        }
      }

      const styles = StyleSheet.create({
        container: {
          flex: 1,
        },
      })
      export default ${1:MyComponent}

    """
  'mobx-rn-stateless':
    'prefix': 'mobx-rn-stateless'
    'body': """
      import { observer } from 'mobx-react'
      import React from 'react'
      import { View, Text, StyleSheet } from 'react-native'
      import PropTypes from 'prop-types'

      function ${1:componentName}({ style }) {
        return (
          <View style={[styles.container, style]} />
        )
      }

      ${1:componentName}.propTypes = {

      }

      ${1:componentName}.defaultProps = {

      }

      const styles = StyleSheet.create({
        container: {},
      })
      export default observer(${1:componentName})
    """
  'mobx-rn-func':
    'prefix': 'mobx-rn-func'
    'body': """
      const ${1:FuncName} = observer(({ ${2:props} }) => (
        <view />
      ))
    """
